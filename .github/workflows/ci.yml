name: Build and Test

on:
  push:
    branches:
      - main
    tags:
      - v*
  pull_request:
    branches:
      - main

jobs:
  build:

    runs-on: ubuntu-latest

    outputs:
      version: ${{ steps.gitversion.outputs.nuGetVersionV2 }}
      branchName: ${{ steps.gitversion.outputs.branchName }}
      commitsSinceVersionSource: ${{ steps.gitversion.outputs.commitsSinceVersionSource }}

    defaults:
      run:
        shell: bash
        working-directory: src/cert-manager-acme-httphook

    steps:
      -
        name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
      -
        name: Setup .NET
        uses: actions/setup-dotnet@v2
        with:
          dotnet-version: 5.0.x
      -
        name: Problem Matcher for dotnet-format
        uses: xt0rted/dotnet-format-problem-matcher@v1.2.0
      -
        name: Install GitVersion
        uses: gittools/actions/gitversion/setup@v0.9.13
        with:
          versionSpec: '5.x'
      -
        name: Install dotnet-format
        run: dotnet tool install -g dotnet-format
      -
        name: Create AssemblyVersionInfo
        run: |
          echo '
          using System.Reflection;

          [assembly: AssemblyFileVersion("0.0.0.0")]
          [assembly: AssemblyVersion("0.0.0.0")]
          [assembly: AssemblyInformationalVersion("0.0.0.0")]
          ' > ../AssemblyVersionInfo.cs
      -
        name: Generate assembly info
        uses: gittools/actions/gitversion/execute@v0.9.13
        with:
          updateAssemblyInfo: true
          updateAssemblyInfoFilename: src/AssemblyVersionInfo.cs
      -
        name: Restore dependencies
        run: dotnet restore
      -
        name: Dotnet Format
        run: dotnet format --check
      -
        name: Build
        run: dotnet build -c Release --no-restore
  #   -
  #     name: Test
  #     run: dotnet test --no-build --verbosity normal

  docker:

    runs-on: ubuntu-latest

    needs: build
    
    outputs:
      version: ${{ steps.gitversion.outputs.nuGetVersionV2 }}
      branchName: ${{ steps.gitversion.outputs.branchName }}
      commitsSinceVersionSource: ${{ steps.gitversion.outputs.commitsSinceVersionSource }}

    defaults:
      run:
        shell: bash
        working-directory: src/cert-manager-acme-httphook

    steps:
      -
        name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
      -
        name: Docker meta
        id: docker_meta
        uses: docker/metadata-action@v3.8.0
        with:
          images: mpoettgen/cert-manager-acme-httphook
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=semver,pattern={{major}}
      -
        name: Set up QEMU
        uses: docker/setup-qemu-action@v1.2.0
      -
        name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v1.7.0
      -
        name: Setup .NET
        uses: actions/setup-dotnet@v2
        with:
          dotnet-version: 5.0.x
      -
        name: Install GitVersion
        uses: gittools/actions/gitversion/setup@v0.9.13
        with:
          versionSpec: '5.x'
      -
        name: Cache Docker layers
        uses: actions/cache@v3.0.2
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-
      -
        name: Create AssemblyVersionInfo
        run: |
          echo '
          using System.Reflection;

          [assembly: AssemblyFileVersion("0.0.0.0")]
          [assembly: AssemblyVersion("0.0.0.0")]
          [assembly: AssemblyInformationalVersion("0.0.0.0")]
          ' > ../AssemblyVersionInfo.cs
      -
        name: Generate assembly info
        uses: gittools/actions/gitversion/execute@v0.9.13
        with:
          updateAssemblyInfo: true
          updateAssemblyInfoFilename: src/AssemblyVersionInfo.cs
      -
        name: Available platforms
        run: echo ${{ steps.buildx.outputs.platforms }}
      -
        name: Login to DockerHub
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v1.14.1
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      -
        name: Build and push Docker images
        uses: docker/build-push-action@v3.0.0
        with:
          context: src
          tags: ${{ steps.docker_meta.outputs.tags }}
          labels: ${{ steps.docker_meta.outputs.labels }}
          platforms: linux/amd64,linux/arm64,linux/arm/v7
          push: ${{ github.event_name != 'pull_request' }}
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache-new
      -
        # Temp fix
        # https://github.com/docker/build-push-action/issues/252
        # https://github.com/moby/buildkit/issues/1896
        name: Move cache
        run: |
          rm -rf /tmp/.buildx-cache
          mv /tmp/.buildx-cache-new /tmp/.buildx-cache

